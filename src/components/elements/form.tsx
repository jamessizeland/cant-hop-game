/** Settings for the game.  This page is loaded once before a game starts to determine rules and player count. */
import { useForm } from "@tanstack/react-form";
import { motion } from "motion/react";
import { useState } from "react";
import { GiFrogFoot } from "react-icons/gi";
import { getName, startGame } from "services/ipc";
import { PlayerColors, PlayerMode, SettingsState } from "types";

function PlayerForm({ first, second }: { first: string; second: string }) {
  // used for name input field on focus and blur
  const [tempName, setTempName] = useState<string>("");

  const defaultValues: SettingsState = {
    players: [
      {
        id: 1,
        name: first, // names generated by getName
        mode: "Human",
        won_cols: [],
      },
      {
        id: 2,
        name: second, // names generated by getName
        mode: "Human",
        won_cols: [],
      },
    ],
    win_cols: 3,
  };
  const form = useForm({
    defaultValues,
    onSubmit: (values) => {
      startGame(values.value).then((success) => {
        if (!success) {
          alert("Failed to start game");
          alert(JSON.stringify(values.value));
          return;
        }
        window.location.href = "/game";
      });
    },
  });
  return (
    <>
      <div className="flex flex-col items-center justify-center">
        <h2 className="m-2 text-xl font-bold">Players</h2>
      </div>
      <form
        className="flex flex-col items-center"
        onSubmit={(e) => {
          e.preventDefault();
          e.stopPropagation();
          form.handleSubmit();
        }}
      >
        <form.Field name="players" mode="array">
          {(field) => (
            <div className="px-2 border-b border-gray-400 mb-6 flex flex-col justify-center items-center">
              <div className="flex flex-row items-center justify-center h-12 my-4">
                <button
                  disabled={field.state.value.length >= 4}
                  className="p-2 h-12 w-12 border rounded mx-2 bg-blue-400 text-white disabled:bg-gray-300 disabled:text-gray-500"
                  onClick={async () => {
                    let name = await getName();
                    field.pushValue({
                      name,
                      mode: "Human",
                      id: Number(`${field.state.value.length + 1}`),
                      won_cols: [],
                    });
                  }}
                  type="button"
                >
                  +
                </button>
                <button
                  disabled={field.state.value.length <= 2}
                  className="p-2 h-12 w-12 border rounded mx-2 bg-blue-400 text-white disabled:bg-gray-300 disabled:text-gray-500"
                  onClick={() =>
                    field.removeValue(field.state.value.length - 1)
                  }
                  type="button"
                >
                  -
                </button>
              </div>
              {field.state.value.map((_, index) => (
                <div
                  key={index}
                  className="flex flex-row items-center justify-center h-10 my-4 space-x-1"
                >
                  <GiFrogFoot
                    className={`w-24 h-24`}
                    style={{
                      color: PlayerColors[index],
                    }}
                  />
                  <form.Field name={`players[${index}].name`}>
                    {(subField) => (
                      <input
                        className="p-2 h-full border rounded max-w-fit input"
                        type="text"
                        placeholder="Name"
                        value={subField.state.value}
                        onFocus={() => {
                          setTempName(subField.state.value);
                          subField.setValue("");
                        }}
                        onBlur={() => {
                          if (subField.state.value === "") {
                            subField.setValue(tempName);
                          }
                          setTempName("");
                        }}
                        onChange={(e) => subField.setValue(e.target.value)}
                      />
                    )}
                  </form.Field>
                  <form.Field name={`players[${index}].mode`}>
                    {(subField) => (
                      <select
                        className="h-full border rounded select mx-2 min-w-fit"
                        value={subField.state.value}
                        onChange={(e) =>
                          subField.setValue(e.target.value as PlayerMode)
                        }
                      >
                        <option value="human">Human</option>
                        <option value="safe">AI: Safe</option>
                        <option value="normal">AI: Normal</option>
                        <option value="risky">AI: Risky</option>
                      </select>
                    )}
                  </form.Field>
                </div>
              ))}

              <h2 className="m-2 text-xl font-bold">Win Columns</h2>
              <form.Field name="win_cols">
                {(field) => (
                  <select
                    className="border rounded select mb-6 w-fit"
                    value={field.state.value}
                    onChange={(e) => field.setValue(Number(e.target.value))}
                  >
                    <option value={1}>1</option>
                    <option value={2}>2</option>
                    <option value={3}>3</option>
                    <option value={4}>4</option>
                    <option value={5}>5</option>
                    <option value={6}>6</option>
                  </select>
                )}
              </form.Field>
            </div>
          )}
        </form.Field>
        <form.Subscribe
          selector={(state) => [state.canSubmit, state.isSubmitting]}
          children={([canSubmit, isSubmitting]) => (
            <motion.button
              className="p-2 h-12 w-32 border rounded mx-2 bg-green-400 text-black disabled:bg-gray-300 disabled:text-gray-500"
              type="submit"
              disabled={!canSubmit}
              animate={{ y: [0, -10, 0] }}
              transition={{
                duration: 0.3,
                repeat: Infinity,
                repeatType: "loop",
                repeatDelay: 3,
              }}
            >
              {isSubmitting ? "..." : "Jump In!"}
            </motion.button>
          )}
        />
      </form>
    </>
  );
}

export default PlayerForm;
